# Godot 4.4 Game Development .cursorrules

## Core Development Guidelines

- Use strict typing in GDScript for better error detection and IDE support
- Implement \_ready() and other lifecycle functions with explicit super() calls
- Use @onready annotations instead of direct node references in \_ready()
- Prefer composition over inheritance where possible
- Use signals for loose coupling between nodes
- Follow Godot's node naming conventions (PascalCase for nodes, snake_case for methods)
- **STRICT INDENTATION**: Never mix tabs and spaces in the same file - Godot 4.4 enforces consistent indentation
- Prefer plain `Array` over typed arrays like `Array[Node]` when experiencing type inference issues
- Always define InputMap actions before referencing them in code (e.g., "shift", "ctrl")

## Code Style

- Use type hints for all variables and function parameters
- Document complex functions with docstrings
- Keep methods focused and under 30 lines when possible
- Use meaningful variable and function names
- Group related properties and methods together
- Be careful of parameter names that shadow built-in properties (e.g., `position` in Node3D)

## Naming Conventions

- Files: Use snake_case for all filenames (e.g., player_character.gd, main_menu.tscn)
- Classes: Use PascalCase for custom class names with class_name (e.g., PlayerCharacter)
- Variables: Use snake_case for all variables including member variables (e.g., health_points)
- Constants: Use ALL_CAPS_SNAKE_CASE for constants (e.g., MAX_HEALTH)
- Functions: Use snake_case for all functions including lifecycle functions (e.g., move_player())
- Enums: Use PascalCase for enum type names and ALL_CAPS_SNAKE_CASE for enum values
- Nodes: Use PascalCase for node names in the scene tree (e.g., PlayerCharacter, MainCamera)
- Signals: Use snake_case in past tense to name events (e.g., health_depleted, enemy_defeated)

## Scene Organization

- Keep scene tree depth minimal for better performance
- Use scene inheritance for reusable components
- Implement proper scene cleanup on queue_free()
- Use SubViewport nodes carefully due to performance impact
- Provide step-by-step instructions to create Godot scene(s) instead of providing scene source code
- **Unit Instantiation**: CharacterBody3D-based units must be instantiated from scene files using `preload()` and `instantiate()`, not `Unit.new()`
- **Group Assignment**: Always add nodes to appropriate groups for systems to find them:
  - Units: `add_to_group("units")`
  - Cameras: `add_to_group("cameras")` and `add_to_group("rts_cameras")`
- Maintain proper parent-child relationships for collision detection and selection

## Signal Best Practices

- Use clear, contextual signal names that describe their purpose (e.g., player_health_changed)
- Utilize typed signals to improve safety and IDE assistance (e.g., signal item_collected(item_name: String))
- Connect signals in code for dynamic nodes, and in the editor for static relationships
- Avoid overusing signals - reserve them for important events, not frequent updates
- Pass only necessary data through signal arguments, avoiding entire node references when possible
- Use an autoload "EventBus" singleton for global signals that need to reach distant nodes
- Minimize signal bubbling through multiple parent nodes
- Always disconnect signals when nodes are freed to prevent memory leaks
- Document signals with comments explaining their purpose and parameters

## Input & Selection Systems

- **Collision Bodies**: Units need proper collision shapes for raycast-based selection
- **Selection Feedback**: Implement both `select()` and `deselect()` methods on selectable units
- **Camera Discovery**: Selection managers need multiple group searches to find cameras reliably
- **Vision Areas**: Be mindful that VisionArea components can interfere with unit selection raycasts
- **Input Validation**: Verify camera availability before attempting selection operations
- Cache frequently accessed nodes rather than searching repeatedly

## Entity System Architecture

- **Centralized Management**: Use a dedicated EntityManager for coordinating entity deployment, lifecycle, and spatial queries
- **Tile-Based Coordination**: Align entity systems with tile-based world coordinates for consistent spatial management
- **Entity Limits**: Implement per-team entity limits to prevent resource abuse (e.g., 10 mines, 5 turrets, 3 spires)
- **Placement Validation**: Validate entity placement against existing world elements (buildings, roads, other entities)
- **State Management**: Implement clear entity states (constructing, active, destroyed) with proper transitions
- **Cleanup Systems**: Implement automatic cleanup for expired entities with proper signal disconnection

## Procedural Generation Integration

- **Coordinate System Alignment**: Ensure procedural systems and entity systems use the same tile-based coordinate system
- **Dependency Injection**: Use dependency injection to connect procedural generators with entity managers
- **Validation Integration**: Integrate entity placement validation with procedural generation constraints
- **Server-Authoritative**: Keep all procedural generation deterministic and server-controlled for multiplayer consistency
- **Spatial Queries**: Implement efficient spatial queries for entity-procedural interactions (e.g., `get_entities_in_area()`)

## AI Integration Patterns

- **Command Translation**: Implement clear separation between natural language processing and game action execution
- **Action Validation**: Always validate AI-generated actions against game rules before execution
- **State Awareness**: Provide AI systems with complete game state context for intelligent decision making
- **Async Processing**: Use async patterns for AI communication to prevent game blocking
- **Plan Execution**: Implement plan executors that can handle multi-step AI strategies with proper error handling

## Resource Management

- Implement proper resource cleanup in \_exit_tree()
- Use preload() for essential resources, load() for optional ones
- Consider PackedByteArray storage impact on backwards compatibility
- Implement resource unloading for unused assets

## Performance Best Practices

- Use node groups judiciously for managing collections, and prefer direct node references for frequent, specific access to individual nodes.
- Implement object pooling for frequently spawned objects
- Use physics layers to optimize collision detection
- Prefer packed arrays (PackedVector2Array, etc.) over regular arrays
- **Spatial Partitioning**: Implement spatial partitioning for efficient entity queries and collision detection
- **Cleanup Systems**: Implement automatic cleanup systems for expired entities and temporary objects
- **Batch Operations**: Group similar operations together to reduce individual processing overhead
- **LOD Systems**: Implement level-of-detail systems for entities based on distance from camera

## Asset Integration Workflows

- **External Asset Packs**: Structure external assets (e.g., Kenney packs) in dedicated directories under `assets/`
- **Import Optimization**: Configure import settings for GLB models to optimize for runtime performance
- **Texture Sharing**: Use shared textures across multiple models when possible to reduce memory usage
- **Animation Workflow**: For character-weapon combinations, implement attachment systems rather than baking animations
- **Asset Validation**: Implement asset validation systems to ensure all required models and textures are present

## Animation System Integration

- **Character-Weapon Attachment**: Implement dynamic weapon attachment systems using attachment points
- **Animation State Management**: Use AnimationTree for complex character animation state management
- **Blend Spaces**: Implement 2D blend spaces for directional movement animations
- **Animation Callbacks**: Use animation callbacks for critical gameplay events (attack completion, reload, etc.)
- **Performance Optimization**: Cache animation players and avoid creating new ones frequently

## Server-Authoritative Design

- **State Synchronization**: Implement server-authoritative state with client prediction for smooth gameplay
- **Validation Systems**: Validate all client actions on the server before applying state changes
- **Deterministic Systems**: Ensure all gameplay systems produce deterministic results for consistent multiplayer
- **Network Optimization**: Implement delta compression and prioritization for network traffic
- **Cheat Prevention**: Design systems to be inherently cheat-proof through server validation

## Dependency Injection

- **Service Locators**: Use dependency injection containers for managing system dependencies
- **Interface Abstraction**: Define clear interfaces for major systems to enable easy testing and swapping
- **Singleton Management**: Manage singletons through dependency injection rather than global access
- **Circular Dependencies**: Avoid circular dependencies by using event-driven communication
- **Testing Support**: Structure dependency injection to support easy unit testing with mock objects

## Advanced Testing Patterns

- **Comprehensive Test Suites**: Implement multi-phase test suites that validate individual components and integration
- **Performance Testing**: Include performance benchmarks in test suites to catch regressions
- **State Validation**: Test all possible system states and transitions, not just happy paths
- **Integration Testing**: Test complete workflows from input to output across multiple systems
- **Cleanup Validation**: Verify proper cleanup of resources and signal disconnections in tests

## Error Handling

- Implement graceful fallbacks for missing resources
- Use assert() for development-time error checking
- Log errors appropriately in production builds
- Handle network errors gracefully in multiplayer games
- Verify InputMap actions exist before checking them with `Input.is_action_pressed()`

## Debugging Best Practices

- **Comprehensive Logging**: Add debug logging to selection, input, and command systems for traceability
- **State Tracking**: Log unit states, positions, and team assignments during testing
- **System Integration**: Test all interconnected systems together (selection → commands → units)
- **Testing Framework**: Implement comprehensive test controls for multiplayer and selection systems
- Use meaningful debug messages that include context (e.g., unit names, positions, states)

## TileMap Implementation

- TileMap node is deprecated - use multiple TileMapLayer nodes instead
- Convert existing TileMaps using the TileMap bottom panel toolbox option "Extract TileMap layers"
- Access TileMap layers through TileMapLayer nodes
- Update navigation code to use TileMapLayer.get_navigation_map()
- Store layer-specific properties on individual TileMapLayer nodes

## Common Pitfalls to Avoid

- Don't use `Unit.new()` for CharacterBody3D-based classes - use scene instantiation instead
- Don't mix tabs and spaces in indentation - choose one and stick with it
- Don't assume InputMap actions exist without defining them first
- Don't forget to add nodes to required groups for system discovery
- Don't skip collision shape setup for selectable units
- Don't forget to properly connect and disconnect signals to prevent memory leaks
- Don't implement entity systems without proper spatial partitioning for large-scale games
- Don't integrate AI systems without proper validation and error handling
- Don't create procedural systems without considering multiplayer determinism
- Don't implement animation systems without proper cleanup and resource management